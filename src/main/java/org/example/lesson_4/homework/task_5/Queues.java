package org.example.lesson_4.homework.task_5;

import java.util.*;

/**
 * Метод, который использует очередь для ротации элементов массива вправо на n позиций
 *  Алгоритм:
 * 	1.	Поместить элементы массива в очередь.
 * 	2.	Удалить последние элементы n раз и добавить их в начало очереди.
 * 	3.	Записать результат из очереди обратно в массив.
 */
public class Queues {
//    Интерфейс Queue
//    add(E e)	Добавляет элемент в конец очереди. Вызывает исключение, если очередь заполнена.
//    offer(E e)	Добавляет элемент в конец очереди. Возвращает true, если успешно, или false, если очередь заполнена.
//    remove()	Удаляет и возвращает первый элемент очереди. Вызывает исключение, если очередь пуста.
//    poll()	Удаляет и возвращает первый элемент очереди. Возвращает null, если очередь пуста.
//    element()	Возвращает первый элемент без удаления. Вызывает исключение, если очередь пуста.
//    peek()	Возвращает первый элемент без удаления. Возвращает null, если очередь пуста.

//    Интерфейс из пакета java.util, который представляет собой структуру данных “первым вошел — первым вышел” (FIFO).
//    LinkedList: реализует двунаправленную очередь.
//    Поддерживает все методы Queue, Deque и List.

//	  PriorityQueue: реализует очередь с приоритетом, где элементы упорядочиваются не по времени добавления, а по приоритету.
//    Поддерживает методы Queue, но не методы Deque. Можно менять направление приоритета элементов в очереди.

//    ArrayDeque: эффективная реализация очереди с использованием массива.
//    addFirst(E e)	Добавляет элемент в начало очереди. Вызывает исключение при переполнении.
//    addLast(E e)	Добавляет элемент в конец очереди. Вызывает исключение при переполнении.
//    offerFirst(E e)	Добавляет элемент в начало очереди. Возвращает true, если успешно.
//    offerLast(E e)	Добавляет элемент в конец очереди. Возвращает true, если успешно.
//    removeFirst()	Удаляет и возвращает первый элемент. Вызывает исключение, если очередь пуста.
//    removeLast()	Удаляет и возвращает последний элемент. Вызывает исключение, если очередь пуста.
//    pollFirst()	Удаляет и возвращает первый элемент. Возвращает null, если очередь пуста.
//    pollLast()	Удаляет и возвращает последний элемент. Возвращает null, если очередь пуста.
//    getFirst()	Возвращает первый элемент без удаления. Вызывает исключение, если очередь пуста.
//    getLast()	Возвращает последний элемент без удаления. Вызывает исключение, если очередь пуста.
//    peekFirst()	Возвращает первый элемент без удаления. Возвращает null, если очередь пуста.
//    peekLast()	Возвращает последний элемент без удаления. Возвращает null, если очередь пуста.

//    Реализация	Двусторонняя очередь	Поддержка списка	Сортировка элементов
//    ArrayDeque	        Да              	    Нет 	            Нет
//    LinkedList	        Да                  	Да              	Нет
//    PriorityQueue   	    Нет	                    Нет             	Да


//    Deque двусторонняя очередь, очередь с двумя концами.
//    Реализация через ArrayDeque и LinkedList
    public static int[] rotateRight(int[] array, int n) {

        if (array == null || array.length == 0 || n < 0) return array;

        Deque<Integer> queue = new ArrayDeque<>();

        for (int el : array) {
            queue.addLast(el);
        }

        // Количество эффективных ротаций
        int rotations = n % array.length;

        // Ротация вправо
        for (int i = 0; i < rotations; i++) {
            // Добавляем в начало очереди последний элемент
            queue.addFirst(Objects.requireNonNull(queue.pollLast()));
        }

        int[] rotatedArray = new int[array.length];
        for (int i = 0; i < rotatedArray.length; i++) {
            // Запись элементов очереди в массив, начиная с начала очереди
            rotatedArray[i] = Objects.requireNonNull(queue.pollFirst());
        }

        return rotatedArray;
    }

    public static void main(String[] args) {

        int[] array = {1, 2, 3, 4, 5};
        int n = 2;

        // Ротация массива
        int[] rotatedArray = rotateRight(array, n);

        // Вывод результата
        System.out.print("Результат ротации: ");
        for (int num : rotatedArray) {
            System.out.print(num + " ");
        }
    }
}
